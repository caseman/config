# Casey's Aliases

alias -g L='| less'
alias -g LL='2>&1 | less'
alias -g G='| grep'
alias -g GG='2>&1 | grep'
alias -g T='| tee'
alias -g TT='2>&1 | tee'
alias -g V='| vim -'
alias -g VV='2>&1 | vim -'
alias -g HD='| head'
alias -g TL='| tail'
alias -g NUL='> /dev/null 2>&1'
alias -g F='| fzf'
alias -g C='| cut -f1 -d'

alias x='chmod +x'
alias ll='ls -lh'
alias la='ls -AF'
alias ls='ls -F'
md() {
    mkdir -p "$1" && pushd "$1"
}
c() {
	pushd "$1" && ls -F
}

# Git
alias gpsup='git push --set-upstream origin $(git-branch-current)'
alias gcm='git checkout master'
alias gcmup='git checkout master && git up'
alias gcob='git checkout -b'
alias gst='git status'
alias gss='git status -s'
alias gchanged='(git diff --name-only master... && git diff --name-only) | sort -u'
alias gmerge='git fetch origin master && git merge origin master'
alias ghurl="git config --get remote.origin.url | sed -e 's/.*@//' -e 's/.git$//' -e 's/:/\//'"
alias prs='open "https://$(ghurl)/pulls"'
alias mprs='open "https://$(ghurl)/pulls/$USER"'
alias ish='open "https://$(ghurl)/issues"'
alias gh='open "https://$(ghurl)"'
gbdp() {
    BRANCH="${$1:-$(git-branch-current)}"
    git checkout master && \
    git branch --delete $BRANCH && \
    git push origin --delete $BRANCH
}
gac() {
    git add "$@" && \
    git commit --verbose
}

goog() {
    Q=$(python -c "import urllib; print urllib.quote(raw_input())" <<< "$@") && \
    /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome \
        "https://www.google.com/search?q=$Q" --new-window NUL
}

alias pd='popd >/dev/null'
alias psg='ps awx | grep'
alias grep='egrep'
alias rgrep='egrep -r'
alias top='top -c'
alias tf='tail -F'
alias ymd='date +%Y%m%d'

redis-del() {
    PATTERN=${@:$#}
    OPTIONS=${@:1:-1}
    eval "redis-cli $OPTIONS KEYS '$PATTERN' | xargs redis-cli $OPTIONS DEL"
}

alias h='history'
alias src='source  ~/.zshrc'
namedir() { eval $1=\"$PWD\" ;  : ~$1 }
alias debugzsh='zsh -xv |& ts "%.S"'

dbr() { 
    tag="$(basename $(pwd))-test"
    echo "build and run: $tag"
    docker build -t "$tag" . && docker run --rm "$tag" $@
}

dkill() {
    tag="$(basename $(pwd))-test"
    id="$(docker ps -q --filter ancestor="$tag")"
    if [ "$id" != "" ]; then
        echo -n "kill container image $tag "
        docker kill "$id"
    else
        echo "No running container for $tag"
    fi
}

up() {
    find . -type d -name ".git" | while read dir; do
        echo "--- Updating $(dirname $dir)"
        (cd $dir/../ && git up && git prunelocal)
    done
}

# vi: ft=zsh

